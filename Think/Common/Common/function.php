<?php/** * 格式化打印 * @param * @return */function p($array){	dump($array, 1,'<pre>',0);}// 检测输入的验证码是否正确，$code为用户输入的验证码字符串function check_verify($code, $id = ''){    $verify = new \Think\Verify();    return $verify->check($code, $id);}/**2	+----------------------------------------------------------3	* 对列表数组进行排序4	+----------------------------------------------------------5	* @param array $list 列表数组6	* @param string $field 排序的字段名7	* 例：$list 为二维时 $field='["field_name"]' $list为三维时 $field='["field_name"]['field_name']';8	* @param array $sortby 排序类型9	* asc正向排序 desc逆向排序 nat自然排序10	+----------------------------------------------------------11	* @return array12	+----------------------------------------------------------13	*/function list_sort_by($list,$field, $sortby='asc') {   if(is_array($list)){       $refer = $resultSet = array();       foreach ($list as $i => $data)       eval('$refer[$i]=&$data'.$field.';');       switch ($sortby) {           case 'asc': // 正向排序                asort($refer);                break;           case 'desc':// 逆向排序                arsort($refer);                break;           case 'nat': // 自然排序                natcasesort($refer);                break;       }       foreach ( $refer as $key=> $val)           //$resultSet[] = &$list[$key];           $resultSet[$key] = &$list[$key];//维持原来索引       return $resultSet;   }   return false;}/**从数组中删除空白的元素（包括只有空白字符的元素）* 从数组中删除空白的元素（包括只有空白字符的元素） * @param array $arr * @param boolean $trim */ function array_remove_empty(& $arr, $trim = true){    foreach ($arr as $key => $value) {        if (is_array($value)) {            array_remove_empty($arr[$key]);        } else {            $value = trim($value);            if ($value == '') {                unset($arr[$key]);            } elseif ($trim) {                $arr[$key] = $value;            }        }    }}/** * 上传文件 * @access      public * @param       string      Path          文件上传到服务器的路径 * @param       array       Exts          允许上传的类型 * @param       int         MaxSize       允许上传的文件大小 * @return      array                     返回文件上传后的相关信息 */function uploadImage($config=array()) {    //默认配置    $config = array_merge(array(        'exts'      => array('jpg', 'gif', 'png', 'jpeg', 'bmp'),        'maxSize'   => 512000,        'image'     => $_FILES        ),$config);    //获取图片信息并对图片做相应处理    $image = new \Think\Image();    foreach ($config['image'] as $v) {        $image->open($v['tmp_name']);        $error = array('error'=>1);        if ($config['width'] > 0 && $config['width'] != $image->width()) {            $error['msg'] = '上传图片失败,宽度尺寸不符合,必须等于'.$config['width'].'px';            return $error;        }        if ($config['height'] > 0 && $config['height'] != $image->height()) {            $error['msg'] = '上传图片失败,高度尺寸不符合,必须等于'.$config['height'].'px';            return $error;         }        if ($config['maxWidth'] > 0 && $image->width() > $config['maxWidth']) {            $error['msg'] = '上传图片失败,宽度尺寸不符合,必须少于等于'.$config['maxWidth'].'px';            return $error;        }        if ($config['maxHeight'] > 0 && $image->height() > $config['maxHeight']) {            $error['msg'] = '上传图片失败,高度尺寸不符合,必须少于等于'.$config['maxHeight'].'px';            return $error;        }        if ($config['maxSize'] > 0 && $config['image']['size'] > $config['maxSize']) {            $error['msg'] = '上传图片失败,上传文件大小不符,必须少于等于'.($config['maxSize'] / 1024).'KB';            return $error;        }    }        $rootPath = '/Public/Uploads/Images/';    $upload = new \Think\Upload($config['image']); // 实例化上传类    if ($config['savepath']) {        $upload->autoSub = false; // 自动使用子目录保存上传文件 默认为true        if(substr($config['savepath'], -1, 1) != '/') $config['savepath'] .= '/';        $upload->savePath = $config['savepath']; // 设置附件上传目录    }    $upload->maxSize = $config['maxSize']; // 设置附件上传大小 默认5M    $upload->exts = $config['exts']; // 设置附件上传类型    $upload->saveName = 'uniqid'; // 上传文件命名规则    $upload->rootPath = ROOT_PATH . $rootPath; // 设置附件上传目录    //创建目录    make_dir($upload->rootPath . $upload->savePath);    $info = $upload->upload();    if(!$info) {// 上传错误提示错误信息        $error['msg'] = $upload->getError();        return $error;    }    $info['image']['fullpath'] = $rootPath . $info['image']['savepath'] . $info['image']['savename'];    return $info['image'];}/** * 检查目标文件夹是否存在，如果不存在则自动创建该目录 * * @access      public * @param       string      folder     目录路径。不能使用相对于网站根目录的URL * * @return      bool */function make_dir($folder) {    $reval = false;    if (!file_exists($folder)) {/* 如果目录不存在则尝试创建该目录 */        @umask(0);        preg_match_all('/([^\/]*)\/?/i', $folder, $atmp); /* 将目录路径拆分成数组 */        $base = ($atmp[0][0] == '/') ? '/' : ''; /* 如果第一个字符为/则当作物理路径处理 */        foreach ($atmp[1] AS $val) {/* 遍历包含路径信息的数组 */            if ('' != $val) {                $base .= $val;                if ('..' == $val || '.' == $val) {                    $base .= '/'; /* 如果目录为.或者..则直接补/继续下一个循环 */                    continue;                }            } else {                continue;            }            $base .= '/';            if (!file_exists($base)) {                if (@mkdir(rtrim($base, '/'), 0777)) {/* 尝试创建目录，如果创建失败则继续循环 */                    @chmod($base, 0777);                    $reval = true;                }            }        }    } else {/* 路径已经存在。返回该路径是不是一个目录 */        $reval = is_dir($folder);    }    clearstatcache();    return $reval;}/** * 加密 * * @access      public * @param       string      pwd     明文密码字符串 * * @return      string */function toEncrypt($pwd) {    return md5(md5($pwd));}/** * 把数组元素组合为字符串 * * @access      public * @param       array      data          要组合的数组 * @param       string     separator     规定数组元素之间放置的内容 * @return      string     limit         规定只能组合多少个数组 */function toImplode($data, $separator='|', $limit=3) {    //格式化游戏盒常去门店数据存入数据库    $res = '';    if ($data && is_array($data) && count($data) <= $limit) {        $res = implode($separator, $data);    }    return $res;}
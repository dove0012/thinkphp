<?phpnamespace Admin\Controller;class PublicController extends \Common\Controller\PublicController{    // 用户登录页面    public function login() {        $this->display();    }        // 登录检测    public function checkLogin() {        if (empty($_POST['account'])) {            $this->error('帐号不能为空!');        } elseif (empty($_POST['password'])) {            $this->error('密码不能为空!');        } elseif (empty($_POST['verify'])) {            $this->error('验证码不能为空!');        }        //生成认证条件        $map = array();        // 支持使用绑定帐号登录        $map['account'] = $_POST['account'];        $map["status"] = array('gt', 0);        $verify = new \Think\Verify();        if (!$verify->check($_POST['verify'], '')) {            $this->error('验证码错误!');        }        $authInfo = \Org\Util\Rbac::authenticate($map);        //使用用户名、密码和状态的方式进行认证        if (false === $authInfo) {            $this->error('帐号不存在或已禁用！');        } else {            if ($authInfo['password'] != md5($_POST['password'])) {                $this->error('密码错误!');            }            session(C('USER_AUTH_KEY'), $authInfo['id']);            session('email', $authInfo['email']);            session('loginUserName', $authInfo['account']);            session('loginUserNickname', $authInfo['nickname']);            session('lastLoginTime', $authInfo['last_login_time']);            session('login_count', $authInfo['login_count']);            if ($authInfo['account'] == 'admin') {                session('administrator', TRUE);            }            //保存登录信息            $ip = get_client_ip();            $time = time();            $data = array();            $data['id'] = $authInfo['id'];            $data['last_login_time'] = $time;            $data['login_count'] = array('exp', 'login_count+1');            $data['last_login_ip'] = $ip;			$model = M('admin',C('DB_PREFIX'));            $model->save($data);            // 缓存访问权限            \Org\Util\Rbac::saveAccessList();            $this->success('登录成功！', U('Admin/Index/index'));        }    }        //子菜单    public function submenu() {        $submenu = array();        if (session('submenu')) {            $submenu = session('submenu');        } else {            $access = M('Access');            $node = M('Node');            if (session('administrator')) {                $nodeId = $node->where(array('menu_level' => 1, 'level' => 2))->order('sort asc')->                    getField('id', true);                foreach ($nodeId as $v) {                    $submenu[] = $node->where(array(                        'menu_level' => 2,                        'pid' => $v,                        'level' => 3))->order('id asc')->getField('title', true);                }            } else {                $nodeId = $access->where(array('role_id' => session(C('USER_AUTH_KEY')), 'level' =>                        3))->order('node_id asc')->getField('node_id', true);                foreach ($nodeId as $k => $v) {                    $where['id'] = $v;                    $where['menu_level'] = 2;                    $action[] = $node->field('pid,title')->where($where)->find();                }                array_remove_empty($action);                foreach ($action as $v) {                    $name = $v['pid'];                    unset($v['pid']);                    $submenus[$name][] = $v['title'];                }                foreach ($submenus as $v) {                    $submenu[] = $v;                }            }        }        session('submenu', $submenu);        $this->ajaxReturn($submenu);    }        // 用户登出    public function logout() {        session('[destroy]');        $this->success('登出成功！', U('Admin/Public/login'));    }        protected function getAccessList($authId = null) {        if (null === $authId)            $authId = session(C('USER_AUTH_KEY'));        $Access = M('Access');        $Access = M('Access');        $Node = M('Node');        $authId = session(C('USER_AUTH_KEY'));        $Access = M('Access');        $Node = M('Node');        $apps = $Node->field('id,name')->where(array('level' => 1))->select();        $access = array();        foreach ($apps as $key => $app) {            $appName = $app['name'];            $access[strtoupper($appName)] = array();            $moduleNodeId = $Access->where(array('role_id' => $authId, 'level' => 2))->                order('node_id asc')->getField('node_id', true);            foreach ($moduleNodeId as $v) {                $modules[] = $Node->field('id,name')->where(array('id' => $v))->find();            }            foreach ($modules as $module) {                $moduleId[] = $module['id'];                $moduleName = $module['name'];                foreach ($moduleId as $v) {                    $where['status'] = 1;                    $where['pid'] = $v;                    $actions = array_flip($Node->where($where)->getField('id,name'));                }                $nodeId = $Access->where(array('role_id' => session(C('USER_AUTH_KEY')), 'level' =>                        3))->order('node_id asc')->getField('node_id', true);                foreach ($nodeId as $v) {                    $where['id'] = $v;                    $action[] = $Node->field('pid,id,name')->where($where)->find();                }                array_remove_empty($action);                foreach ($action as $v) {                    $name = $v['pid'];                    $id = $v['id'];                    unset($v['pid']);                    $submenus[$name][$id] = $v['name'];                }                foreach ($submenus as $v) {                    $name = array_flip($v);                }                $access[strtoupper($appName)][strtoupper($moduleName)] = array_change_key_case($name,                    CASE_UPPER);            }        }        return $access;    }    public function verify() {        $config = array(            'imageW' => 120,            'imageH' => 30,            'codeSet' => '0123456789',            'fontSize' => 16,            'length' => '4',            'useCurve' => false,            );        $Verify = new \Think\Verify($config);        $Verify->entry();    }}
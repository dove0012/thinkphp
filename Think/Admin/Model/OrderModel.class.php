<?phpnamespace Admin\Model;use Think\Model\RelationModel;class OrderModel extends RelationModel {    protected $_validate = array(        array('member_id', 'require', '下单者不能为空!'), //默认情况下用正则进行验证        array('price', 'require', '单价不能为空!'), //默认情况下用正则进行验证        array('hour', 'require', '时长不能为空!'), //默认情况下用正则进行验证        array('to_member_id', 'require', '约单对象不能为空!'), //默认情况下用正则进行验证        array('order_city', 'require', '约单城市不能为空!'), //默认情况下用正则进行验证        array('order_time', 'require', '约单时间不能为空!'), //默认情况下用正则进行验证        array('game_id', 'require', '约玩游戏不能为空!'), //默认情况下用正则进行验证        array('shop_id', 'require', '约玩门店不能为空!'), //默认情况下用正则进行验证    );    protected $_auto = array (         array('create_time', 'time', 1, 'function'), // 对create_time字段在创建的时候写入当前时间戳        array('update_time', 'time', 3, 'function'), // 对update_time字段在所有情况都写入当前时间戳    );    public function take($data) {        $back = $whereStr = $whereArray = array();        if ($data['id']) {            $back = $this->where('id=%d', array($data['id']))->find();        } else {            if ($data['status']) {                array_push($whereStr, "status='%s'");                array_push($whereArray, $data['status']);            }            if ($data['member_id']) {                array_push($whereStr, 'member_id=%d');                array_push($whereArray, $data['member_id']);            }            if ($data['to_member_id']) {                array_push($whereStr, 'to_member_id=%d');                array_push($whereArray, $data['to_member_id']);            }            $back = $this->where(implode(' and ', $whereStr), $whereArray)->order('create_time desc')->mSelect();        }        return $back;    }    public function addOrder($data) {        if (!$this->orderInfo($data)) return false;        $order_id = $this->add();        if ($order_id){            return $order_id;        }        $this->error = '订单生成失败!';        return false;    }    public function edit($data) {        if (!$m = $this->orderInfo($data)) return false;        $m['update_time'] = time();        if ($this->where('id=%d', array($data['id']))->save($m) === false) {            $this->error = '更新订单失败!';            return false;        }        return true;    }    private function orderInfo($data) {        $m['member_id'] = trim($data['member_id']);        $m['member_name'] = trim($data['member_name']);        $m['member_city'] = toImplode($data['member_city']);        $m['price'] = trim($data['price']);        $m['hour'] = trim($data['hour']);        $m['total_price'] = $m['price'] * $m['hour'];        $m['to_member_id'] = trim($data['to_member_id']);        $m['to_member_name'] = trim($data['to_member_name']);        $m['to_member_city'] = toImplode($data['to_member_city']);        $m['order_city'] = toImplode($data['order_city']);        $m['order_time'] = trim($data['order_time']);        $m['game_id'] = trim($data['game_id']);        $m['game_name'] = trim($data['game_name']);        $m['shop_id'] = trim($data['shop_id']);        $m['shop_name'] = trim($data['shop_name']);        $m['remark'] = trim($data['remark']);        if ($m['member_id'] == $m['to_member_id']) {            $this->error = '被约对象不能为自己!';            return false;        }        if (!$this->create($m)) {            return false;        }        return $m;    }}
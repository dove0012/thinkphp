<?phpnamespace Admin\Model;use Think\Model\RelationModel;class CategoryModel extends RelationModel {	    protected $_validate = array(        array('name', 'require', '类别名不能为空!'), //默认情况下用正则进行验证        //array('name', '', '类别名已经存在!', 0, 'unique'), // 在新增的时候验证name字段是否唯一    );		protected $_auto = array(        array('create_time', 'time', 1, 'function'), // 对create_time字段在创建的时候写入当前时间戳        array('update_time', 'time', 3, 'function'), // 对update_time字段在所有情况都写入当前时间戳    );    public function take() {        return $this->field('c.*,COUNT(s.id) AS has_children')->table(C('DB_PREFIX') . 'category AS c')->join('left join ' . C('DB_PREFIX') . 'category AS s ON c.id=s.pid')->group('c.id')->order('c.pid,c.sort,c.id')->select();    }	    /**     * 获得指定分类下的子分类的数组     *     * @access  public     * @param   int     $cat_id     分类的ID     * @param   int     $selected   当前选中分类的ID     * @param   boolean $re_type    返回的类型: 值为真时返回下拉列表,否则返回数组     * @param   int     $level      限定返回的级数。为0时返回所有级数     * @param   int     $is_show_all 如果为true显示所有分类，如果为false隐藏不可见分类。     * @return  mix     */    public function cat_list($cat_id = 0, $selected = 0, $re_type = true, $level = 0, $is_show_all = true) {        static $res = NULL;        if ($res === NULL) {            //$data = read_static_cache('cat_pid_releate');            $data = false;            if ($data === false) {                $res = $this->take();                //如果数组过大，不采用静态缓存方式                if (count($res) <= 1000) {                    //write_static_cache('cat_pid_releate', $res);                }            } else {                $res = $data;            }        }        if (empty($res) == true) {            return $re_type ? '' : array();        }        $options = $this->cat_options($cat_id, $res); // 获得指定分类下的子分类的数组        $children_level = 99999; //大于这个分类的将被删除        if ($is_show_all == false) {            foreach ($options as $key => $val) {                if ($val['level'] > $children_level) {                    unset($options[$key]);                } else {                    if ($val['static'] == 0) {                        unset($options[$key]);                        if ($children_level > $val['level']) {                            $children_level = $val['level']; //标记一下，这样子分类也能删除                        }                    } else {                        $children_level = 99999; //恢复初始值                    }                }            }        }        /* 截取到指定的缩减级别 */        if ($level > 0) {            if ($cat_id == 0) {                $end_level = $level;            } else {                $first_item = reset($options); // 获取第一个元素                $end_level = $first_item['level'] + $level;            }            /* 保留level小于end_level的部分 */            foreach ($options AS $key => $val) {                if ($val['level'] >= $end_level) {                    unset($options[$key]);                }            }        }        if ($re_type == true) {            $select = '';            foreach ($options AS $var) {                $select .= '<option value="' . $var['id'] . '" ';                $select .= ($selected == $var['id']) ? "selected='ture'" : '';                $select .= '>';                if ($var['level'] > 0) {                    $select .= str_repeat('&nbsp;', $var['level'] * 6);                }                $select .= htmlspecialchars(addslashes($var['name']), ENT_QUOTES) . '</option>';            }            return $select;        } else {            return $options;        }    }	    /**     * 过滤和排序所有分类，返回一个带有缩进级别的数组     *     * @access  private     * @param   int     $cat_id     上级分类ID     * @param   array   $arr        含有所有分类的数组     * @param   int     $level      级别     * @return  void     */    public function cat_options($spec_cat_id, $arr) {        $cat_options = array();        if (isset($cat_options[$spec_cat_id])) {            return $cat_options[$spec_cat_id];        }        if (!isset($cat_options[0])) {            $level = $last_cat_id = 0;            $options = $cat_id_array = $level_array = array();            //$data = read_static_cache('cat_option_static');            $data = false;			$i = 0;            if ($data === false) {                while (!empty($arr)) {                    foreach ($arr AS $key => $value) {                        $cat_id = $value['id'];                        if ($level == 0 && $last_cat_id == 0) {                            if ($value['pid'] > 0) {                                break;                            }                            $options[$i] = $value;                            $options[$i]['level'] = $level;                            $options[$i]['id'] = $cat_id;                            $options[$i]['name'] = $value['name'];                            //用于后面获取指定分类数组                            if ($value['id'] == $spec_cat_id) $spec_cat_id_level = $level;							$i++;                            unset($arr[$key]);                            if ($value['has_children'] == 0) {                                continue;                            }                            $last_cat_id = $cat_id;                            $cat_id_array = array($cat_id);                            $level_array[$last_cat_id] = ++$level;                            continue;                        }                        if ($value['pid'] == $last_cat_id) {                            $options[$i] = $value;                            $options[$i]['level'] = $level;                            $options[$i]['id'] = $cat_id;                            $options[$i]['name'] = $value['name'];                            //用于后面获取指定分类数组                            if ($value['id'] == $spec_cat_id) $spec_cat_id_level = $level;							$i++;                            unset($arr[$key]);                            if ($value['has_children'] > 0) {                                if (end($cat_id_array) != $last_cat_id) {                                    $cat_id_array[] = $last_cat_id;                                }                                $last_cat_id = $cat_id;                                $cat_id_array[] = $cat_id;                                $level_array[$last_cat_id] = ++$level;                            }                        } elseif ($value['pid'] > $last_cat_id) {                            break;                        }                    }                    $count = count($cat_id_array);                    if ($count > 1) {                        $last_cat_id = array_pop($cat_id_array);                    } elseif ($count == 1) {                        if ($last_cat_id != end($cat_id_array)) {                            $last_cat_id = end($cat_id_array);                        } else {                            $level = 0;                            $last_cat_id = 0;                            $cat_id_array = array();                            continue;                        }                    }                    if ($last_cat_id && isset($level_array[$last_cat_id])) {                        $level = $level_array[$last_cat_id];                    } else {                        $level = 0;                    }                }                //如果数组过大，不采用静态缓存方式                if (count($options) <= 2000) {                    //write_static_cache('cat_option_static', $options);                }            } else {                $options = $data;            }            $cat_options[0] = $options;        } else {            $options = $cat_options[0];        }        if (!$spec_cat_id) {            return $options;        } else {            if (empty($options[$spec_cat_id])) {                return array();            }            foreach ($options AS $key => $value) {                if ($key != $spec_cat_id) {                    unset($options[$key]);                } else {                    break;                }            }            $spec_cat_id_array = array();            foreach ($options AS $key => $value) {                if (($spec_cat_id_level == $value['level'] && $value['id'] != $spec_cat_id) || ($spec_cat_id_level > $value['level'])) {                    break;                } else {                    $spec_cat_id_array[$key] = $value;                }            }            $cat_options[$spec_cat_id] = $spec_cat_id_array;            return $spec_cat_id_array;        }    }}